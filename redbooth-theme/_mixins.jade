//- Common mixins that templates can share

mixin MainNav()
  .rb-docs-mobile-main-nav.select.visible-xs.visible-sm
    select.js-main-movile-nav(aria-label='redbooth-navigation')
      option(value=locals.root_url)= 'Home'
      each section in locals.doc_sections
        - var is_current_section = custom_helpers.isCurrentSection(section.raw_name, api.resourceGroups);
        option(value=section.url, selected=is_current_section)
          = section.name
  ul.rb-docs-main-nav.hidden-xs.hidden-sm.nav.nav-pills.nav-stacked
    li
      a(href=locals.root_url)= 'Home'
      each section in locals.doc_sections
        - var is_current_section = custom_helpers.isCurrentSection(section.raw_name, api.resourceGroups);
        - var active_class = is_current_section ? 'active' : '';
        li(class=active_class)
          a(href=section.url)
            = section.name

mixin ResourceNavigation()
  nav.js-resource-navigation.rb-docs-resource-sidebar.hidden-sm.hidden-xs.nav(role='complementary')
    each resourceGroup in api.resourceGroups
      - var resource_group_slug = slug(resourceGroup.name);
      ul.rb-docs-resource-sidenav.nav(id="#{resource_group_slug}-menu")
        each resource in resourceGroup.resources
          - var resource_slug = slug(resourceGroup.name) + '-' + slug(resource.name);
          li
            a(href="##{resource_slug}")
              = resource.name || 'Resource'
            ul.nav
              each action in resource.actions
                li
                  a(href="##{resource_slug}-#{slug(action.method)}")
                    = action.name || action.method + ' ' + resource.uriTemplate

mixin Parameters(params)
  ul.list-group
    li.list-group-item.bg-default: strong Parameters
    li.list-group-item
      dl.dl-horizontal
        each param in params
          dt= param.name
          dd
            code= param.type
            | &nbsp;
            if param.required
              span.required (required)
            else
              span (optional)
            | &nbsp;
            if param.default
              span.text-info.default
                strong Default:&nbsp;
                span= param.default
              | &nbsp;
            if param.example
              span.text-muted.example
                strong Example:&nbsp;
                span= param.example
            != markdown(param.description)
            if param.values.length
              p
                strong Choices:&nbsp;
                each value in param.values
                  code= value.value
                  = ' '

mixin RequestResponse(title, request, resourceGroup, resource, action)
  - var id = hash(resourceGroup.name.toString() + resource.name.toString() + action.name.toString() + action.method.toString() + title.toString() + request.name.toString() + request.headers.toString() + request.body.toString() + request.schema.toString())
  - var content = request.description || Object.keys(request.headers).length || request.body || request.schema
  li.list-group-item
    strong
      = title
      if request.name
        | &nbsp;&nbsp;
        code= request.name
    if content
      a.pull-right.collapsed(data-toggle="collapse", data-target="##{id}")
        span='Show more info'

  if content
    li.list-group-item.panel-collapse.collapse(id=id)
      if request.description
        .description!= markdown(request.description)

      if Object.keys(request.headers).length
        h5 Headers
        pre
          code
            each item in request.headers
              != highlight(item.name + ': ' + item.value, 'http')
              br
      if request.body
        h5 Body
        pre
          code!= highlight(request.body)
      if request.schema
        h5 Schema
        pre
          code!= highlight(request.schema)


mixin Examples(resourceGroup, resource, action)
  ul.list-group
    each example in action.examples
      each request in example.requests
        +RequestResponse('Request', request, resourceGroup, resource, action)
      each response in example.responses
        +RequestResponse('Response', response, resourceGroup, resource, action)

mixin ResourceGroup(resourceGroup, getButtonClass, multipage)
  .panel
    .panel-heading
      h3(id="#{slug(resourceGroup.name)}")
        = resourceGroup.name || 'Resource Group'
        | &nbsp;
        a(href="##{multipage ? 'page:' : ''}#{slug(resourceGroup.name)}")
          i.fa.fa-link
    .panel-body
      if resourceGroup.description
        .rb-aglio-doc-resource-description
          != markdown(resourceGroup.description)
      each resource in resourceGroup.resources
        h4(id="#{slug(resourceGroup.name)}-#{slug(resource.name)}")
          = resource.name || 'Resources'
          | &nbsp;
          a(href="##{(multipage ? 'page:' + slug(resourceGroup.name) + ',header:' : '')}#{slug(resourceGroup.name)}-#{slug(resource.name)}")
            i.fa.fa-link
        if resource.description
          != markdown(resource.description)
        each action in resource.actions
          case action.method
            when 'POST': - var panelClass = 'panel-success'
            when 'GET': - var panelClass = 'panel-info'
            when 'PUT': - var panelClass = 'panel-warning'
            when 'PATCH': - var panelClass = 'panel-warning'
            when 'DELETE': - var panelClass = 'panel-danger'
            default: - var panelClass = 'panel-default'
          section.panel(class=panelClass, id="#{slug(resourceGroup.name)}-#{slug(resource.name)}-#{slug(action.method)}")
            .panel-heading
              if action.name
                div.rb-doc-resource-name= action.name
              case action.method
                when 'POST': - var btnClass = 'btn-success'
                when 'GET': - var btnClass = 'btn-' + getButtonClass
                when 'PUT': - var btnClass = 'btn-warning'
                when 'PATCH': - var btnClass = 'btn-warning'
                when 'DELETE': - var btnClass = 'btn-danger'
                default: - var btnClass = 'btn-default'
              div(style="float:left")
                a.btn.btn-xs(class=btnClass, href="##{(multipage ? 'page:' + slug(resourceGroup.name) + ',header:' : '')}#{slug(resourceGroup.name)}-#{slug(resource.name)}-#{slug(action.method)}")= action.method
              div(style="overflow:hidden")
                code= resource.uriTemplate
            if action.description
              .panel-body!= markdown(action.description)

            - var params = action.parameters.length ? action.parameters : resource.parameters
            if params.length
              +Parameters(params)
            if action.examples
              +Examples(resourceGroup, resource, action)

mixin Content(getButtonClass, multipage)
  each resourceGroup, index in api.resourceGroups
    .rb-aglio-doc-resource(data-bind=multipage ? "visible: page() == '#{slug(resourceGroup.name)}', style: {marginTop: page() == '#{slug(resourceGroup.name)}' ? '38px' : ''}" : undefined)
      +ResourceGroup(resourceGroup, getButtonClass, multipage)
